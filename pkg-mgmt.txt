Package Managment
It manages packages by using package manager tools
It can install, reinstall, verify, remove/erase, upgrade, update, remote, search  and quiry information about software packages from repositories.
Update:-adding paches/new releases to existing softwares
Upgrade:-replacing same software from old to new
Syntax:- packagename-version-arch.rpm
Package manager tools:-
Download resourse from command line browser
1.	Wget
2.	Curl
3.	Links
4.	elinks
Redhat/centos/Fedora/Open SUSE(pkg ext:- .rpm):-
1.	Rpm-
2.	Yum
3.	Dnf -----replacement/next genaration of yum
Ubuntos/Debain(pkg ext:- .deb):-
1.	Apt-get
2.	Apt-cache
3.	Apt----replacement/next genaration of apt-get 
4.	Dpkg
RPM: - Red hat Package Manager
Syntax:- rpm <options> <pkgname>
Options:
-i -------install
-v------verbose
-h------display progress in hashes(#)
-U------update and install
-F------update
-e------erase/remove
-q-----check install/not and old version
-qa----list all installed rpm pkg
-ql---list all files related to queried rpm( config files, sources files, doc files)
-qc---list only config files related to queried rpm
-qd--- list only doc files related to queried rpm
-qi—show complete info about queried installed rpm
-qf, -qpR, -qip
-qa --last ------ list all recently installed rpm pkgs
--force ----installed/upgrade forcefully
-- nodeps--- skip to check dependencies
Note: - To rebuild rpm data base get currecpted
First start by backing up your current RPM database before proceeding
Challenges:-
•	rpm command terminates with “cannot open Packages database in /var/lib/rpm”
•	rpmdb: Lock table is out of available locker entries
•	rpmdb: /var/lib/rpm/Packages: unexpected file type or format
error: cannot open Packages index using db3 – Invalid argument (22)
•	error: rpmdbNextIterator: skipping h# 1601 Header V4 RSA/SHA1 signature: BAD, key ID 2142eef7
Method 1:-
Cd /var/lib/rpm
rm -rf  _ _db*
rpm –rebuilddb
rpmdb_verify Packages (or)
/usr/lib/rpm/rpmdb_verify /var/lib/rpm/Packages
Method 2:- If you are still getting errors
# mv Packages Packages-BAKUP
# db_dump Packages-BAKUP | db_load Packages
# rpm -qa
# rpm --rebuilddb
YUM:- yellowdog  updater modifier
It is advanced of rpm, it install packages automactically by resolving their dependencies issues
Create RPM Repository
Repsitory:- it is storage location from which your system retrives softwares install, update, search and is a collection of software hosted on a remote server
Download/Copy all rpm’s from installation source (iso image/DVD)
Mount  /dev/sr0 /mnt
mkdir /rhel7rpm
cp -rv /mnt/packages/* /rhel7rpm
cd /rhel7rpm
ls | wc –l
createrepo -v . (. :- cwd)
rpm –ivh createrepo---------(Tab)
rpm –ivh deltarpm----------
rpm –ivh python-deltarpm--------
createrepo -v .
Note:- if createrepo command not found than install createrepo rpm pkg
Create repo database
Create repo config file under:- /etc/yum.repos.d/
Cd /etc/yum.repos.d/
Vim local.repo
[rhel7rpm]
Name = rhel7 rpm’s
Baseurl = file:///rhel7rpm
enabled = 1
gpgcheck = 0
:wq!
Commands:-
Yum repoinfo <repo name>---------Display info about yum repository
Yum repolist ---To check list available only enable repositories
Yum repolist all------it shows both enable and disable repo
Yum list----------- To check list available only enable packages
Yum list all-------- To check list available both enable and disable packages
Yum list/search/install/remove/erase/update/check-update/upgrade/downgrade/swap/reinstall/localinstall/deplist(diplay dependencies  <pkgname>  -y/n(yes/no)
Yum info <pkgname>-------To check  info about rpm pkge
Yum list installed----------To check all installed rpm pkgs
Yum provides <pkgname>------
To know a file belongs to which rpm pkgs
Eg:- yum provide /etc/passwd
Note:-Bydefault yum keeps all the repository enabled pkg data in /var/cache/yum/ directory with sub dir, to clean all catched file from enaled repository run.
Yum clean all--------clear out all pkg from meta data from cache
Yum clean--------clear out catched pkg data
Yum history --------To view history of yum
To list all available group pkg
Yum grouplist/groupinstall/groupremove/groupupdate/groupinfo <grp pkgname>
Interactive yum Shell:- yum provides a custom shell where can run multiple yum commands
Eg:-
Yum shell
>install vsftpd
>remove httpd
>update openssh
>run
>exit
Enable Repo:-
Yum –enablerepo=repoid <pkgname>
Eg:- Yum –enablerepo=rhel7local  install httpd
Note:-if you don’t want update certain packages we can exclude/disable certain packages update from any repository
Syntax:- exclude=pkgname1 pkgname2 pkgname4
Eg:-
 vim /etc/yum.conf
 exclude=httpd vsftpd openssh
:wq
Vim /etc/yum.repos.d/local.repo
exclude=httpd vsftpd openssh
:wq
Note:- we can also use yum command line option to exclude pkgs without adding to repository config file
Yum –exclude=pkgname
Eg:- yum –exclude=httpd update
If you want excludemultiple pkgs
Yum –exclude=httpd –exclude=vsftpd –exclude=openssh
Yum –exclude=httpd,vsftpd.openssh
To disable pkgs temporarly for install/update
Yum –x httpd update
Yum –x httpd openssh vsftpd update-----multiple pkgs
To disable/ignore a pkg from exclude list and continue to update/install
Yum –disableexclude=httpd update
Yum –disablexclude=all update   (all means disable all exclude)
Yum –disableexclude=main install python
Yum –disableexclude=repoid update
Eg:- yum –disableexclude=rhel7local update  
 Repository Servers & websites:-
Official repositories:- centos,redhat, fedora
3rd party repositories:- rpmfind.net, pkgs.org, rpmforce, rpmfusion, epel, remi
Epel----extra package for enterprise linux
Yum install epel-release


